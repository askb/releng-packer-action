---
# SPDX-License-Identifier: Apache-2.0
# Packer Build on VexxHost with Tailscale Bastion

name: Packer Build with VexxHost Tailscale Bastion

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
    inputs:
      packer_template:
        description: "Packer template to build (e.g., builder.pkr.hcl)"
        required: false
        type: string
        default: "builder.pkr.hcl"
      packer_vars:
        description: "Packer vars file (e.g., ubuntu-22.04)"
        required: false
        type: string
        default: "ubuntu-22.04"
      bastion_flavor:
        description: "VexxHost instance flavor for bastion"
        required: false
        type: string
        default: "v3-standard-2"
      bastion_image:
        description: "Base image for bastion host"
        required: false
        type: string
        default: "Ubuntu 22.04"
      debug_mode:
        description: "Enable debug logging"
        required: false
        type: boolean
        default: false
  push:
    branches: [main]
    paths:
      - "packer/**"
      - "common-packer/**"
  pull_request:
    branches: [main]
    paths:
      - "packer/**"
      - "common-packer/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKER_VERSION: "1.11.2"
  OS_CLOUD: "vex"
  BASTION_NAME: "bastion-gh-${{ github.run_id }}"
  BASTION_WAIT_TIMEOUT: 300
  OPENSTACK_FLAVOR: ${{ inputs.bastion_flavor || 'v3-standard-2' }}
  OPENSTACK_IMAGE: ${{ inputs.bastion_image || 'Ubuntu 22.04' }}
  OPENSTACK_NETWORK: "default"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check.outputs.has-changes }}
      packer-path: ${{ steps.find-packer.outputs.packer-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Find packer directory
        id: find-packer
        run: |
          if [ -d "packer" ]; then
            echo "packer-path=packer" >> $GITHUB_OUTPUT
          elif [ -d "common-packer" ]; then
            echo "packer-path=common-packer" >> $GITHUB_OUTPUT
          else
            echo "packer-path=." >> $GITHUB_OUTPUT
          fi

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: check
        with:
          filters: |
            has-changes:
              - 'packer/**'
              - 'common-packer/**'
              - 'vars/**'
              - 'templates/**'
              - 'provision/**'

  packer-build-vexxhost:
    needs: prepare
    runs-on: ubuntu-latest
    if: |
      needs.prepare.outputs.has-changes == 'true' || 
      github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      # ========================================
      # Step 1: Setup Tailscale VPN
      # ========================================
      - name: Setup Tailscale VPN
        uses: tailscale/github-action@v2
        with:
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_KEY }}
          hostname: github-runner-${{ github.run_id }}

      - name: Verify Tailscale connection
        run: |
          echo "✅ Tailscale status:"
          sudo tailscale status

      # ========================================
      # Step 2: Setup OpenStack CLI
      # ========================================
      - name: Setup Python and OpenStack CLI
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install OpenStack CLI
        run: |
          python -m pip install --upgrade pip
          pip install python-openstackclient
          pip freeze

      - name: Configure OpenStack credentials
        env:
          OS_AUTH_URL: ${{ secrets.VEXXHOST_AUTH_URL }}
          OS_PROJECT_ID: ${{ secrets.VEXXHOST_PROJECT_ID }}
          OS_PROJECT_NAME: ${{ secrets.VEXXHOST_PROJECT_NAME }}
          OS_USERNAME: ${{ secrets.VEXXHOST_USERNAME }}
          OS_PASSWORD: ${{ secrets.VEXXHOST_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.VEXXHOST_REGION }}
          OS_IDENTITY_API_VERSION: "3"
          OS_USER_DOMAIN_NAME: "Default"
          OS_PROJECT_DOMAIN_NAME: "Default"
        run: |
          echo "OS_AUTH_URL=${OS_AUTH_URL}" >> $GITHUB_ENV
          echo "OS_PROJECT_ID=${OS_PROJECT_ID}" >> $GITHUB_ENV
          echo "OS_PROJECT_NAME=${OS_PROJECT_NAME}" >> $GITHUB_ENV
          echo "OS_USERNAME=${OS_USERNAME}" >> $GITHUB_ENV
          echo "OS_PASSWORD=${OS_PASSWORD}" >> $GITHUB_ENV
          echo "OS_REGION_NAME=${OS_REGION_NAME}" >> $GITHUB_ENV
          echo "OS_IDENTITY_API_VERSION=${OS_IDENTITY_API_VERSION}" >> $GITHUB_ENV
          echo "OS_USER_DOMAIN_NAME=${OS_USER_DOMAIN_NAME}" >> $GITHUB_ENV
          echo "OS_PROJECT_DOMAIN_NAME=${OS_PROJECT_DOMAIN_NAME}" >> $GITHUB_ENV

      - name: Test OpenStack connection
        run: |
          echo "Testing OpenStack connection..."
          openstack --version
          openstack server list --limit 1 || echo "No servers found or limited access"

      # ========================================
      # Step 3: Create and Launch Bastion Host
      # ========================================
      - name: Create cloud-init script for bastion
        run: |
          # Use enhanced cloud-init template with variable substitution
          export BASTION_HOSTNAME="${{ env.BASTION_NAME }}"
          export TAILSCALE_AUTH_KEY="${{ secrets.TAILSCALE_AUTH_KEY }}"
          
          # Create cloud-init from template or inline
          if [ -f "templates/bastion-cloud-init.yaml" ]; then
            echo "Using cloud-init template from repository..."
            envsubst < templates/bastion-cloud-init.yaml > cloud-init.yaml
          else
            echo "Creating inline cloud-init configuration..."
            cat > cloud-init.yaml <<'EOFCI'
          #cloud-config
          # VexxHost Tailscale Bastion Host Cloud-Init
          hostname: ${BASTION_HOSTNAME}
          manage_etc_hosts: true
          
          package_update: true
          package_upgrade: true
          
          packages:
            - curl
            - wget
            - jq
            - net-tools
            - iputils-ping
            - ca-certificates
            - python3
            - python3-pip
          
          write_files:
            - path: /etc/sysctl.d/99-tailscale.conf
              content: |
                net.ipv4.ip_forward = 1
                net.ipv6.conf.all.forwarding = 1
                net.netfilter.nf_conntrack_max = 131072
              permissions: '0644'
            
            - path: /usr/local/bin/bastion-init.sh
              content: |
                #!/bin/bash
                set -e
                echo "[$(date)] Bastion initialization started" | tee -a /var/log/bastion-init.log
                
                # Wait for network
                until ping -c 1 8.8.8.8 &>/dev/null; do
                  echo "Waiting for network..." | tee -a /var/log/bastion-init.log
                  sleep 2
                done
                
                echo "[$(date)] Network ready" | tee -a /var/log/bastion-init.log
                
                # Install Tailscale
                echo "[$(date)] Installing Tailscale..." | tee -a /var/log/bastion-init.log
                curl -fsSL https://tailscale.com/install.sh | sh
                
                # Start Tailscale
                echo "[$(date)] Starting Tailscale..." | tee -a /var/log/bastion-init.log
                tailscale up \
                  --authkey="${TAILSCALE_AUTH_KEY}" \
                  --hostname="${BASTION_HOSTNAME}" \
                  --advertise-tags=tag:bastion \
                  --ssh \
                  --accept-routes \
                  --accept-dns=false
                
                TAILSCALE_IP=$(tailscale ip -4)
                echo "[$(date)] Tailscale connected: ${TAILSCALE_IP}" | tee -a /var/log/bastion-init.log
                
                # Create ready marker
                echo "READY" > /tmp/bastion-ready
                echo "[$(date)] Bastion ready" | tee -a /var/log/bastion-init.log
              permissions: '0755'
            
            - path: /etc/motd
              content: |
                ╔═══════════════════════════════════════════╗
                ║   VexxHost Tailscale Bastion Host        ║
                ║   GitHub Actions Packer Build Env        ║
                ╚═══════════════════════════════════════════╝
                Logs: /var/log/bastion-init.log
              permissions: '0644'
          
          timezone: UTC
          
          users:
            - name: ubuntu
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/bash
              groups: sudo
              lock_passwd: true
          
          ssh_pwauth: false
          disable_root: false
          
          runcmd:
            - sysctl -p /etc/sysctl.d/99-tailscale.conf
            - /usr/local/bin/bastion-init.sh
          
          final_message: "Bastion initialization complete after $UPTIME seconds"
          EOFCI
            
            # Substitute environment variables
            sed -i "s/\${BASTION_HOSTNAME}/$BASTION_HOSTNAME/g" cloud-init.yaml
            sed -i "s/\${TAILSCALE_AUTH_KEY}/$TAILSCALE_AUTH_KEY/g" cloud-init.yaml
          fi
          
          echo "Cloud-init script created:"
          cat cloud-init.yaml

      - name: Launch bastion instance on VexxHost
        id: launch-bastion
        run: |
          echo "🚀 Launching bastion instance..."
          
          openstack server create \
            --flavor "${{ env.OPENSTACK_FLAVOR }}" \
            --image "${{ env.OPENSTACK_IMAGE }}" \
            --network "${{ env.OPENSTACK_NETWORK }}" \
            --user-data cloud-init.yaml \
            --wait \
            "${{ env.BASTION_NAME }}"
          
          echo "✅ Bastion instance created"
          
          # Get instance details
          openstack server show "${{ env.BASTION_NAME }}" -f yaml

      - name: Wait for bastion to join Tailscale network
        id: wait-bastion
        timeout-minutes: 10
        run: |
          echo "⏳ Waiting for bastion to join Tailscale network..."
          
          TIMEOUT=${{ env.BASTION_WAIT_TIMEOUT }}
          ELAPSED=0
          INTERVAL=10
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if sudo tailscale status | grep -q "${{ env.BASTION_NAME }}"; then
              BASTION_IP=$(sudo tailscale status | grep "${{ env.BASTION_NAME }}" | awk '{print $1}')
              echo "BASTION_IP=${BASTION_IP}" >> $GITHUB_ENV
              echo "✅ Bastion joined Tailscale at IP: ${BASTION_IP}"
              
              # Wait for bastion initialization to complete
              echo "Waiting for bastion initialization..."
              for i in {1..24}; do
                if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
                   root@${BASTION_IP} "test -f /tmp/bastion-ready" 2>/dev/null; then
                  echo "✅ Bastion initialization complete (ready marker found)"
                  
                  # Display bastion status
                  echo "Bastion status:"
                  ssh -o StrictHostKeyChecking=no root@${BASTION_IP} \
                    "cat /var/log/bastion-init.log | tail -20" || true
                  
                  exit 0
                fi
                echo "Waiting for bastion ready marker... (attempt $i/24)"
                sleep 5
              done
              
              echo "⚠️ Bastion reachable but ready marker not found, proceeding anyway..."
              echo "Checking bastion logs:"
              ssh -o StrictHostKeyChecking=no root@${BASTION_IP} \
                "cat /var/log/bastion-init.log 2>/dev/null || echo 'Log not available'" || true
              exit 0
            fi
            
            echo "Waiting for bastion... ($ELAPSED/$TIMEOUT seconds)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          
          echo "❌ Timeout waiting for bastion to join Tailscale"
          echo "Checking Tailscale status:"
          sudo tailscale status
          echo "Checking OpenStack instance status:"
          openstack server show "${{ env.BASTION_NAME }}"
          echo "Checking console log (last 100 lines):"
          openstack console log show "${{ env.BASTION_NAME }}" --lines 100
          exit 1

      # ========================================
      # Step 4: Setup Packer
      # ========================================
      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Create Packer cloud environment file
        if: env.CLOUD_ENV_B64 != ''
        env:
          CLOUD_ENV_B64: ${{ secrets.CLOUD_ENV_B64 }}
        run: |
          if [ -n "$CLOUD_ENV_B64" ]; then
            echo "$CLOUD_ENV_B64" | base64 --decode > "${GITHUB_WORKSPACE}/cloud-env.pkrvars.hcl"
            echo "✅ Cloud environment file created"
          else
            echo "⚠️ CLOUD_ENV_B64 secret not set, skipping cloud-env file"
            touch "${GITHUB_WORKSPACE}/cloud-env.pkrvars.hcl"
          fi

      - name: Create OpenStack clouds.yaml
        if: env.CLOUDS_YAML_B64 != ''
        env:
          CLOUDS_YAML_B64: ${{ secrets.CLOUDS_YAML_B64 }}
        run: |
          if [ -n "$CLOUDS_YAML_B64" ]; then
            mkdir -p "$HOME/.config/openstack"
            echo "$CLOUDS_YAML_B64" | base64 --decode > "$HOME/.config/openstack/clouds.yaml"
            echo "✅ OpenStack clouds.yaml created"
          else
            echo "⚠️ CLOUDS_YAML_B64 secret not set, using environment variables"
          fi

      # ========================================
      # Step 5: Validate and Build with Packer
      # ========================================
      - name: Initialize Packer templates
        working-directory: ${{ needs.prepare.outputs.packer-path }}
        run: |
          echo "Initializing Packer templates..."
          
          for template in templates/*.pkr.hcl; do
            if [[ "$template" == *"variables"* ]]; then
              continue
            fi
            
            echo "Initializing $template..."
            packer init "$template" || echo "⚠️ Init failed for $template"
          done

      - name: Validate Packer templates
        working-directory: ${{ needs.prepare.outputs.packer-path }}
        run: |
          set -x
          
          varfiles=(vars/*.pkrvars.hcl)
          templates=(templates/*.pkr.hcl)
          
          mkdir -p "${GITHUB_WORKSPACE}/logs"
          
          for varfile in "${varfiles[@]}"; do
            # Skip cloud-env and example files
            if [[ "$varfile" == *"cloud-env"* ]] || \
               [[ "$varfile" == "vars/*.pkrvars.hcl" ]]; then
              continue
            fi
            
            # Filter by user input if provided
            if [[ -n "${{ inputs.packer_vars }}" ]] && \
               [[ "$varfile" != *"${{ inputs.packer_vars }}"* ]]; then
              echo "Skipping $varfile (doesn't match filter)"
              continue
            fi
            
            echo "::group::Validating $varfile"
            for template in "${templates[@]}"; do
              if [[ "$template" == *"variables"* ]]; then
                continue
              fi
              
              # Filter by user input if provided
              if [[ -n "${{ inputs.packer_template }}" ]] && \
                 [[ "$template" != *"${{ inputs.packer_template }}" ]]; then
                echo "Skipping $template (doesn't match filter)"
                continue
              fi
              
              export PACKER_LOG=1
              export PACKER_LOG_PATH="${GITHUB_WORKSPACE}/logs/validate-${varfile##*/}-${template##*/}.log"
              
              if OS_CLOUD=${{ env.OS_CLOUD }} packer validate \
                   -var-file="${GITHUB_WORKSPACE}/cloud-env.pkrvars.hcl" \
                   -var-file="$varfile" \
                   -var="bastion_host=${{ env.BASTION_IP }}" \
                   "$template"; then
                echo "✅ $template validated with $varfile"
              else
                echo "❌ Validation failed for $template with $varfile"
                exit 1
              fi
            done
            echo "::endgroup::"
          done

      - name: Build Packer images
        working-directory: ${{ needs.prepare.outputs.packer-path }}
        env:
          PACKER_LOG: ${{ inputs.debug_mode && '1' || '0' }}
        run: |
          set -x
          
          varfiles=(vars/*.pkrvars.hcl)
          templates=(templates/*.pkr.hcl)
          
          mkdir -p "${GITHUB_WORKSPACE}/build-logs"
          
          build_count=0
          max_builds=5  # Limit concurrent builds
          
          for varfile in "${varfiles[@]}"; do
            # Skip cloud-env and example files
            if [[ "$varfile" == *"cloud-env"* ]] || \
               [[ "$varfile" == "vars/*.pkrvars.hcl" ]]; then
              continue
            fi
            
            # Filter by user input if provided
            if [[ -n "${{ inputs.packer_vars }}" ]] && \
               [[ "$varfile" != *"${{ inputs.packer_vars }}"* ]]; then
              echo "Skipping $varfile (doesn't match filter)"
              continue
            fi
            
            if [ $build_count -ge $max_builds ]; then
              echo "⚠️ Reached maximum builds limit ($max_builds)"
              break
            fi
            
            echo "::group::Building with $varfile"
            for template in "${templates[@]}"; do
              if [[ "$template" == *"variables"* ]]; then
                continue
              fi
              
              # Filter by user input if provided
              if [[ -n "${{ inputs.packer_template }}" ]] && \
                 [[ "$template" != *"${{ inputs.packer_template }}" ]]; then
                echo "Skipping $template (doesn't match filter)"
                continue
              fi
              
              export PACKER_LOG_PATH="${GITHUB_WORKSPACE}/build-logs/build-${varfile##*/}-${template##*/}.log"
              
              echo "🔨 Building $template with $varfile via bastion ${{ env.BASTION_IP }}..."
              
              if OS_CLOUD=${{ env.OS_CLOUD }} packer build \
                   -var-file="${GITHUB_WORKSPACE}/cloud-env.pkrvars.hcl" \
                   -var-file="$varfile" \
                   -var="bastion_host=${{ env.BASTION_IP }}" \
                   -var="bastion_user=root" \
                   "$template"; then
                echo "✅ Successfully built $template with $varfile"
                build_count=$((build_count + 1))
              else
                echo "❌ Build failed for $template with $varfile"
                echo "::warning::Build failed for $template with $varfile"
                # Continue with other builds
              fi
              
              # Only build one template per varfile to limit resource usage
              break
            done
            echo "::endgroup::"
          done
          
          echo "📊 Completed $build_count builds"

      # ========================================
      # Step 6: Upload Artifacts and Logs
      # ========================================
      - name: Upload Packer logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: packer-logs-${{ github.run_id }}
          path: |
            logs/
            build-logs/
          retention-days: 30

      - name: Upload bastion logs
        if: always() && env.BASTION_IP != ''
        continue-on-error: true
        run: |
          mkdir -p bastion-logs
          
          # Try to fetch cloud-init logs from bastion
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            root@${{ env.BASTION_IP }} \
            "cat /var/log/cloud-init-output.log" > bastion-logs/cloud-init-output.log || true
          
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            root@${{ env.BASTION_IP }} \
            "cloud-init status --long" > bastion-logs/cloud-init-status.log || true

      - name: Upload bastion diagnostics
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: bastion-logs-${{ github.run_id }}
          path: bastion-logs/
          retention-days: 7

      # ========================================
      # Step 7: Cleanup (Always Runs)
      # ========================================
      - name: Cleanup bastion instance
        if: always()
        run: |
          echo "🧹 Cleaning up bastion instance..."
          
          # Remove from Tailscale (optional, ephemeral keys auto-cleanup)
          if [ -n "${{ env.BASTION_IP }}" ]; then
            sudo tailscale logout || true
          fi
          
          # Delete OpenStack instance
          if openstack server show "${{ env.BASTION_NAME }}" &>/dev/null; then
            echo "Deleting bastion instance..."
            openstack server delete --wait "${{ env.BASTION_NAME }}" || {
              echo "⚠️ Failed to delete bastion cleanly, force deleting..."
              openstack server delete "${{ env.BASTION_NAME }}" || true
            }
            echo "✅ Bastion instance deleted"
          else
            echo "⚠️ Bastion instance not found, may have been deleted already"
          fi

      - name: Verify cleanup
        if: always()
        run: |
          echo "Verifying cleanup..."
          
          if openstack server show "${{ env.BASTION_NAME }}" &>/dev/null; then
            echo "⚠️ Warning: Bastion instance still exists!"
            openstack server show "${{ env.BASTION_NAME }}"
          else
            echo "✅ Bastion instance cleanup verified"
          fi
          
          echo "Final Tailscale status:"
          sudo tailscale status || true

  # ========================================
  # Summary Job
  # ========================================
  summary:
    if: always()
    needs: [prepare, packer-build-vexxhost]
    runs-on: ubuntu-latest
    steps:
      - name: Build summary
        run: |
          echo "## Packer Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bastion:** ${{ env.BASTION_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.packer-build-vexxhost.result }}" == "success" ]; then
            echo "✅ **Build Status:** Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
